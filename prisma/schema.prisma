// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Experiment {
    id    String @id @default(uuid()) @db.Uuid
    label String

    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    InputVariable InputVariable[]
    PromptVariant PromptVariant[]
}

model PromptVariant {
    id String @id @default(uuid()) @db.Uuid

    experimentId String     @db.Uuid
    experiment   Experiment @relation(fields: [experimentId], references: [id])

    sortIndex Int    @default(0)
    label     String

    config Json

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    ModelOutput ModelOutput[]
}

model TestScenario {
    id String @id @default(uuid()) @db.Uuid

    sortIndex Int @default(0)

    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    ScenarioVariableVal ScenarioVariableVal[]
    ModelOutput         ModelOutput[]
}

model InputVariable {
    id String @id @default(uuid()) @db.Uuid

    label String

    experimentId String     @db.Uuid
    experiment   Experiment @relation(fields: [experimentId], references: [id])

    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    ScenarioVariableVal ScenarioVariableVal[]
}

model ScenarioVariableVal {
    id String @id @default(uuid()) @db.Uuid

    inputVariableId String         @db.Uuid
    inputVariable   InputVariable? @relation(fields: [inputVariableId], references: [id])

    testScenarioId String        @db.Uuid
    testScenario   TestScenario? @relation(fields: [testScenarioId], references: [id])

    value String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([inputVariableId, testScenarioId])
}

model ModelOutput {
    id String @id @default(uuid()) @db.Uuid

    promptVariantId String        @db.Uuid
    promptVariant   PromptVariant @relation(fields: [promptVariantId], references: [id])

    testScenarioId String       @db.Uuid
    testScenario   TestScenario @relation(fields: [testScenarioId], references: [id])

    variableValues Json
    inputsHash     String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
