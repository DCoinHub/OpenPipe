/* tslint:disable */
/* eslint-disable */
/**
 * OpenPipe API
 * The public API for reporting API calls to OpenPipe
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CheckCache200Response
 */
export interface CheckCache200Response {
    /**
     * JSON-encoded response payload
     * @type {any}
     * @memberof CheckCache200Response
     */
    'respPayload'?: any;
}
/**
 * 
 * @export
 * @interface CheckCacheDefaultResponse
 */
export interface CheckCacheDefaultResponse {
    /**
     * 
     * @type {string}
     * @memberof CheckCacheDefaultResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof CheckCacheDefaultResponse
     */
    'code': string;
    /**
     * 
     * @type {Array<CheckCacheDefaultResponseIssuesInner>}
     * @memberof CheckCacheDefaultResponse
     */
    'issues'?: Array<CheckCacheDefaultResponseIssuesInner>;
}
/**
 * 
 * @export
 * @interface CheckCacheDefaultResponseIssuesInner
 */
export interface CheckCacheDefaultResponseIssuesInner {
    /**
     * 
     * @type {string}
     * @memberof CheckCacheDefaultResponseIssuesInner
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface CheckCacheRequest
 */
export interface CheckCacheRequest {
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof CheckCacheRequest
     */
    'requestedAt': number;
    /**
     * JSON-encoded request payload
     * @type {any}
     * @memberof CheckCacheRequest
     */
    'reqPayload'?: any;
    /**
     * Extra tags to attach to the call for filtering. Eg { \"userId\": \"123\", \"promptId\": \"populate-title\" }
     * @type {{ [key: string]: string; }}
     * @memberof CheckCacheRequest
     */
    'tags'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface LocalTestingOnlyGetLatestLoggedCall200Response
 */
export interface LocalTestingOnlyGetLatestLoggedCall200Response {
    /**
     * 
     * @type {string}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200Response
     */
    'cacheHit': boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200Response
     */
    'tags': { [key: string]: string; };
    /**
     * 
     * @type {LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200Response
     */
    'modelResponse': LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse | null;
}
/**
 * 
 * @export
 * @interface LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse
 */
export interface LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse {
    /**
     * 
     * @type {string}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse
     */
    'statusCode': number | null;
    /**
     * 
     * @type {string}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse
     */
    'errorMessage': string | null;
    /**
     * 
     * @type {any}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse
     */
    'reqPayload'?: any;
    /**
     * 
     * @type {any}
     * @memberof LocalTestingOnlyGetLatestLoggedCall200ResponseModelResponse
     */
    'respPayload'?: any;
}
/**
 * 
 * @export
 * @interface ReportRequest
 */
export interface ReportRequest {
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof ReportRequest
     */
    'requestedAt': number;
    /**
     * Unix timestamp in milliseconds
     * @type {number}
     * @memberof ReportRequest
     */
    'receivedAt': number;
    /**
     * JSON-encoded request payload
     * @type {any}
     * @memberof ReportRequest
     */
    'reqPayload'?: any;
    /**
     * JSON-encoded response payload
     * @type {any}
     * @memberof ReportRequest
     */
    'respPayload'?: any;
    /**
     * HTTP status code of response
     * @type {number}
     * @memberof ReportRequest
     */
    'statusCode'?: number;
    /**
     * User-friendly error message
     * @type {string}
     * @memberof ReportRequest
     */
    'errorMessage'?: string;
    /**
     * Extra tags to attach to the call for filtering. Eg { \"userId\": \"123\", \"promptId\": \"populate-title\" }
     * @type {{ [key: string]: string; }}
     * @memberof ReportRequest
     */
    'tags'?: { [key: string]: string; };
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if a prompt is cached
         * @param {CheckCacheRequest} checkCacheRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCache: async (checkCacheRequest: CheckCacheRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkCacheRequest' is not null or undefined
            assertParamExists('checkCache', 'checkCacheRequest', checkCacheRequest)
            const localVarPath = `/check-cache`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkCacheRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the latest logged call (only for local testing)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localTestingOnlyGetLatestLoggedCall: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/local-testing-only-get-latest-logged-call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Report an API call
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        report: async (reportRequest: ReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportRequest' is not null or undefined
            assertParamExists('report', 'reportRequest', reportRequest)
            const localVarPath = `/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if a prompt is cached
         * @param {CheckCacheRequest} checkCacheRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCache(checkCacheRequest: CheckCacheRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckCache200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCache(checkCacheRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the latest logged call (only for local testing)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async localTestingOnlyGetLatestLoggedCall(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocalTestingOnlyGetLatestLoggedCall200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.localTestingOnlyGetLatestLoggedCall(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Report an API call
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async report(reportRequest: ReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.report(reportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Check if a prompt is cached
         * @param {CheckCacheRequest} checkCacheRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCache(checkCacheRequest: CheckCacheRequest, options?: any): AxiosPromise<CheckCache200Response> {
            return localVarFp.checkCache(checkCacheRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the latest logged call (only for local testing)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localTestingOnlyGetLatestLoggedCall(options?: any): AxiosPromise<LocalTestingOnlyGetLatestLoggedCall200Response> {
            return localVarFp.localTestingOnlyGetLatestLoggedCall(options).then((request) => request(axios, basePath));
        },
        /**
         * Report an API call
         * @param {ReportRequest} reportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        report(reportRequest: ReportRequest, options?: any): AxiosPromise<any> {
            return localVarFp.report(reportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Check if a prompt is cached
     * @param {CheckCacheRequest} checkCacheRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkCache(checkCacheRequest: CheckCacheRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).checkCache(checkCacheRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the latest logged call (only for local testing)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public localTestingOnlyGetLatestLoggedCall(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).localTestingOnlyGetLatestLoggedCall(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Report an API call
     * @param {ReportRequest} reportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public report(reportRequest: ReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).report(reportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


